// Singularity containter cache. Change this as appropriate
singularity {
	cacheDir = "/opt/singularity_cache"
}

// Default parameters. Commandline parameters will take priority over these
params {
	executor = "local"
	outdir = './results'
        basecalling = false
        demultiplexing = false
        gpu = true
        fast5 = false
        fastq = false
	datadir = false
	demultiplexer = 'guppy'
	//Path to the Guppy GPU and CPU binary folder (v3.6.1). Change this as appropriate when providing Guppy as a binary folder and do not forget the "/" at the end of the path
	guppy_gpu_folder = "/scratch/ont-guppy/bin/"
	guppy_cpu_folder = "/scratch/ont-guppy-cpu/bin/"
	//Uncomment the two following lines when providing Guppy container images (and comment the two previous lines)
	//guppy_gpu_folder = ""
	//guppy_cpu_folder = ""
	guppy_config_gpu = "dna_r9.4.1_450bps_hac.cfg"
        guppy_config_cpu = "dna_r9.4.1_450bps_fast.cfg"
        kit = false
        flowcell = false
        guppy_gpu_device = "auto"
        guppy_num_callers = 8
        guppy_cpu_threads_per_caller = 1
        guppy_basecaller_args = "--recursive --trim_barcodes -q 0"
        guppy_barcoder_args = "--recursive --trim_barcodes -q 0"
        guppy_barcode_kits= "SQK-RBK004"
        guppy_barcoder_threads = 2
        qcat_args = ""
        skip_pycoqc = false
        skip_rasusa = true
        skip_porechop = false
        skip_filtering = false
        rasusa_coverage = 100
        filtering = "japsa"
        porechop_args = ""
        porechop_threads = 4
        japsa_args = "--lenMin 1000 --qualMin 10"
        filtlong_args = "--min_length 1000 --keep_percent 90"
        flye_args = "--plasmids"
        flye_threads = 4
        polisher = "medaka"
        racon_nb = 4
        racon_args = "-m 8 -x -6 -g -8 -w 500"
        racon_threads = 4
        medaka_model = "r941_min_high"
        medaka_threads = 8
        nextpolish_threads = 4
	nextpolish_task_SR = "1212"
	nextpolish_task_LR = "55"
	skip_illumina = false
        fixstart_args = ""
        skip_fixstart = false
        quast_threads = 1
        quast_args = ""
        skip_quast = false
}

// Process settings. Set job scheduler if appropriate (SLURM, PBS e.g.)
// If your job scheduler has different queues/partitions for cpu and gpu, please also set them here
process {
	executor = params.executor
        withLabel: cpu { queue = 'main' }
        withLabel: gpu { queue = 'gpu' }
}

// Debug and report options
trace {
  enabled = true
  file = "${params.outdir}/trace.txt"
}
timeline {
  enabled = true
  file = "${params.outdir}/timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/report.html"
}
dag {
  enabled = true
  file = "${params.outdir}/flowchart_dag.svg"
}



// Not generally user-modifiable !!!
process {
	withLabel: big_mem { memory = 32.GB }
	//Path to the Guppy GPU and CPU container images (v3.6.1). Uncomment and change this as appropriate if providing Guppy as a container image. 
	//withLabel: guppy_gpu { container = '' }
	//withLabel: guppy_cpu { container = '' }
	withLabel: pycoqc { container = 'docker://quay.io/biocontainers/pycoqc:2.5.0.23--py_0' }
	withName: demultiplexing_qcat { container = 'docker://quay.io/biocontainers/qcat:1.0.1--py_0' }
	withName: rasusa { container = 'docker://quay.io/biocontainers/rasusa:0.3.0--h516909a_0' }
	withName: porechop { container = 'docker://quay.io/biocontainers/porechop:0.2.3_seqan2.1.1--0' }
   	withName: filtlong { container = 'docker://quay.io/biocontainers/filtlong:0.2.0--he513fc3_3' }
   	withName: japsa { container = 'docker://vmurigneux/japsa:latest' }
	withName: flye { container = 'docker://quay.io/biocontainers/flye:2.5--py27he513fc3_0' }
	withName: racon_cpu { container = 'docker://vmurigneux/racon:1.4.9' }
        withLabel: medaka { container = 'docker://quay.io/biocontainers/medaka:0.10.0--py36hbcae180_1' }
        withLabel: nextpolish { container = 'docker://pvstodghill/nextpolish:1.1.0__2020-05-12' }
	withLabel: circlator { container = 'docker://quay.io/biocontainers/circlator:1.5.5--py_3' }
	withName: quast { container = 'docker://quay.io/biocontainers/quast:5.0.2--py37pl526hb5aa323_2' }
	errorStrategy = 'ignore'
}

mounts {
    fast5 = ""
    fastq = ""
    datadir = ""
    if (params.fast5 != false) {
        fast5 = "-B \"`[[ \"${params.fast5}\" =~ ^/ ]] && echo ${params.fast5} || echo ${PWD}/${params.fast5}`\""
    }
    if (params.fastq != false){
        fastq = "-B \"`[[ \"${params.fastq}\" =~ ^/ ]] && echo ${params.fastq} || echo ${PWD}/${params.fastq}`\""
    }
    if (params.datadir != false){
        datadir = "-B \"`[[ \"${params.datadir}\" =~ ^/ ]] && echo ${params.datadir} || echo ${PWD}/${params.datadir}`\""
    }   
}

singularity {
    enabled = true
    autoMounts = false
    runOptions = "-B \"$launchDir\" $mounts.fast5 $mounts.fastq $mounts.datadir -B \"`[[ \"${params.outdir}\" =~ ^/ ]] && echo ${params.outdir} || echo ${PWD}/${params.outdir}`\""
}

manifest {
  name = 'microPIPE'
  author = 'Valentine Murigneux'
  description = 'Bacterial genome assembly pipeline'
  homePage = 'https://github.com/BeatsonLab-MicrobialGenomics/micropipe'
  mainScript = 'main.nf'
  version = '0.9'
}

